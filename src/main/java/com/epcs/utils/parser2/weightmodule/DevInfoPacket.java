package com.epcs.utils.parser2.weightmodule;

import com.epcs.utils.parser2.UtilsConvert;
import com.epcs.utils.parser2.UtilsTime;

public class DevInfoPacket {

    /** identifier */
    public final static byte HEAD = (byte) 0x68;
    public final static byte TAIL = (byte) 0x97;

    /** Auto Generated by CodeGenerator.protocalDefGen */
    final static int HEAD_INDEX = 0;
    final static int HEAD_LEN = 1;
    final static int MSG_LEN_INDEX = HEAD_INDEX + HEAD_LEN;
    final static int MSG_LEN_LEN = 2;
    final static int MSG_TYPE_INDEX = MSG_LEN_INDEX + MSG_LEN_LEN;
    final static int MSG_TYPE_LEN = 1;
    final static int DEV_TYPE_INDEX = MSG_TYPE_INDEX + MSG_TYPE_LEN;
    final static int DEV_TYPE_LEN = 2;
    final static int DEV_ADDR_INDEX = DEV_TYPE_INDEX + DEV_TYPE_LEN;
    final static int DEV_ADDR_LEN = 2;
    final static int DEV_ID_INDEX = DEV_ADDR_INDEX + DEV_ADDR_LEN;
    final static int DEV_ID_LEN = 15;
    final static int DEV_VER_INDEX = DEV_ID_INDEX + DEV_ID_LEN;
    final static int DEV_VER_LEN = 3;
    final static int BATT_VOL_INDEX = DEV_VER_INDEX + DEV_VER_LEN;
    final static int BATT_VOL_LEN = 2;
    final static int DEV_YEAR_INDEX = BATT_VOL_INDEX + BATT_VOL_LEN;
    final static int DEV_YEAR_LEN = 1;
    final static int DEV_MONTH_INDEX = DEV_YEAR_INDEX + DEV_YEAR_LEN;
    final static int DEV_MONTH_LEN = 1;
    final static int DEV_DAY_INDEX = DEV_MONTH_INDEX + DEV_MONTH_LEN;
    final static int DEV_DAY_LEN = 1;
    final static int DEV_HOUR_INDEX = DEV_DAY_INDEX + DEV_DAY_LEN;
    final static int DEV_HOUR_LEN = 1;
    final static int DEV_MIN_INDEX = DEV_HOUR_INDEX + DEV_HOUR_LEN;
    final static int DEV_MIN_LEN = 1;
    final static int DEV_SECOND_INDEX = DEV_MIN_INDEX + DEV_MIN_LEN;
    final static int DEV_SECOND_LEN = 1;
    final static int DEV_RSSI_INDEX = DEV_SECOND_INDEX + DEV_SECOND_LEN;
    final static int DEV_RSSI_LEN = 1;
    final static int UPLOAD_CNT_INDEX = DEV_RSSI_INDEX + DEV_RSSI_LEN;
    final static int UPLOAD_CNT_LEN = 4;
    final static int DOWNLOAD_CNT_INDEX = UPLOAD_CNT_INDEX + UPLOAD_CNT_LEN;
    final static int DOWNLOAD_CNT_LEN = 4;
    final static int DEV_TEMPERATURE_INDEX = DOWNLOAD_CNT_INDEX + DOWNLOAD_CNT_LEN;
    final static int DEV_TEMPERATURE_LEN = 2;
    final static int LONGITUDE_INDEX = DEV_TEMPERATURE_INDEX + DEV_TEMPERATURE_LEN;
    final static int LONGITUDE_LEN = 4;
    final static int LATITUDE_INDEX = LONGITUDE_INDEX + LONGITUDE_LEN;
    final static int LATITUDE_LEN = 4;
    final static int UPLOAD_CYCLE_INDEX = LATITUDE_INDEX + LATITUDE_LEN;
    final static int UPLOAD_CYCLE_LEN = 2;
    final static int VALUE_INDEX = UPLOAD_CYCLE_INDEX + UPLOAD_CYCLE_LEN;
    final static int VALUE_LEN = 2;
    final static int CRC_INDEX = VALUE_INDEX + VALUE_LEN;
    final static int CRC_LEN = 2;
    final static int TAIL_INDEX = CRC_INDEX + CRC_LEN;
    final static int TAIL_LEN = 1;

    // HEAD 1
    // MSG_LEN 2
    // MSG_TYPE 1
    // DEV_TYPE 2
    // DEV_ADDR 2
    // DEV_ID 15
    // DEV_VER 3
    // BATT_VOL 2
    // DEV_YEAR 1
    // DEV_MONTH 1
    // DEV_DAY 1
    // DEV_HOUR 1
    // DEV_MIN 1
    // DEV_SECOND 1
    // DEV_RSSI 1
    // UPLOAD_CNT 4
    // DOWNLOAD_CNT 4
    // DEV_TEMPERATURE 2
    // LONGITUDE 4
    // LATITUDE 4
    // UPLOAD_CYCLE 2
    // VALUE 2
    // CRC 2
    // TAIL 1

    public byte head;
    public int msgLen;// 整条数据报的长度
    public byte msgType;// 帧类型，类型默认0x00
    public int devType;// 设备类型
    public int devAddr;// 设备地址
    public byte[] devId = new byte[15];// 设备ID
    public byte[] devVersion = new byte[3];// 设备版本
    public int batVoltage;// 电池电压

    public int year;// u8值为实际年份与2000的差值,如17表示2017年
    public int month;
    public int day;
    public int hour;
    public int min;
    public int second;

    public byte devRssi;// 信号强度
    public int uploadCnt;// 上送次数
    public int downloadCnt;// 接收次数
    public int devTemperature;// 设备温度

    public double longitude;// 经度 高8位表示整数,低24位表示小数
    public double latitude;// 纬度 高8位表示整数,低24位表示小数
    public int upLoadCycle;// 数据上送周期
    public int sampleValue;// 采样值
    public int crc;// crc值，不含帧头帧尾
    public byte tail;

    public long devTime;
    public String devTimestampString;
    @Override
    public String toString() {
        StringBuilder s = new StringBuilder();
        s.append("msgLen=" + msgLen + " ");
        s.append("msgType=" + msgType + " ");
        s.append("devType=" + devType + " ");
        s.append("devAddr=" + devAddr + " ");
        s.append("batVoltage=" + batVoltage + " ");
        s.append("devTime=" + devTimestampString + " ");
        s.append("devRssi=" + devRssi + " ");
        s.append("uploadCnt=" + uploadCnt + " ");
        s.append("downloadCnt=" + downloadCnt + " ");
        s.append("devTemperature=" + devTemperature + " ");
        s.append("longitude=" + longitude + " ");
        s.append("latitude=" + latitude + " ");
        s.append("upLoadCycle=" + upLoadCycle + " ");
        s.append("sampleValue=" + sampleValue + " ");
        s.append("crc=" + crc + " \n");

        return s.toString();
    }

    boolean isValid = false;

    public DevInfoPacket(byte[] in) {
        if (in == null || in.length < TAIL_INDEX + TAIL_LEN)
            return;
        head = (byte) UtilsConvert.formInt(in, HEAD_INDEX, HEAD_LEN);
        if (head != HEAD)
            return;
        tail = (byte) UtilsConvert.formInt(in, TAIL_INDEX, TAIL_LEN);
        if (tail != TAIL)
            return;

        msgLen = UtilsConvert.formInt(in, MSG_LEN_INDEX, MSG_LEN_LEN);
        msgType = (byte) UtilsConvert.formInt(in, MSG_TYPE_INDEX, MSG_TYPE_LEN);
        devType = UtilsConvert.formInt(in, DEV_TYPE_INDEX, DEV_TYPE_LEN);
        devAddr = UtilsConvert.formInt(in, DEV_ADDR_INDEX, DEV_ADDR_LEN);
        for (int i = 0; i < DEV_ID_LEN; i++) {
            devId[i] = in[DEV_ID_INDEX + i];
        }
        for (int i = 0; i < DEV_VER_LEN; i++) {
            devVersion[i] = in[DEV_VER_INDEX + i];
        }
        batVoltage = UtilsConvert.formInt(in, BATT_VOL_INDEX, BATT_VOL_LEN);
        year = UtilsConvert.formInt(in, DEV_YEAR_INDEX, DEV_YEAR_LEN) + 2000;// 实际年份与2000的差值,如17表示2017年
        month = UtilsConvert.formInt(in, DEV_MONTH_INDEX, DEV_MONTH_LEN);
        day = UtilsConvert.formInt(in, DEV_DAY_INDEX, DEV_DAY_LEN);
        hour = UtilsConvert.formInt(in, DEV_HOUR_INDEX, DEV_HOUR_LEN);
        min = UtilsConvert.formInt(in, DEV_MIN_INDEX, DEV_MIN_LEN);
        second = UtilsConvert.formInt(in, DEV_SECOND_INDEX, DEV_SECOND_LEN);

        devTime = UtilsTime.split2TimeLong(year, month, day, hour, min, second);
        devTimestampString = UtilsTime.getTimestampString(devTime);

        devRssi = (byte) UtilsConvert.formInt(in, DEV_RSSI_INDEX, DEV_RSSI_LEN);
        uploadCnt = UtilsConvert.formInt(in, UPLOAD_CNT_INDEX, UPLOAD_CNT_LEN);
        downloadCnt = UtilsConvert.formInt(in, DOWNLOAD_CNT_INDEX, DOWNLOAD_CNT_LEN);

        devTemperature = UtilsConvert.formInt(in, DEV_TEMPERATURE_INDEX, DEV_TEMPERATURE_LEN);

        // longitude = UtilsConvert.formInt(in, LONGITUDE_INDEX, LONGITUDE_LEN);

        int lon = UtilsConvert.formInt(in, LONGITUDE_INDEX, LONGITUDE_LEN);
        int lonInt = 0xff & (lon >> 24);
        double lonDecimal = (double) (0xffffff & lon) / 1000000;// 6位精度
        longitude = lonInt + lonDecimal;

        int lat = UtilsConvert.formInt(in, LATITUDE_INDEX, LATITUDE_LEN);
        int latInt = 0xff & (lat >> 24);
        double latDecimal = (double) (0xffffff & lat) / 1000000;// 6位精度
        latitude = latInt + latDecimal;

        upLoadCycle = UtilsConvert.formInt(in, UPLOAD_CYCLE_INDEX, UPLOAD_CYCLE_LEN);
        sampleValue = UtilsConvert.formInt(in, VALUE_INDEX, VALUE_LEN);
        crc = UtilsConvert.formInt(in, CRC_INDEX, CRC_LEN);
        int realCRC = CRC.calcCrc16(in, HEAD_INDEX + HEAD_LEN, CRC_INDEX - HEAD_INDEX - HEAD_LEN);
        if (crc != realCRC)
            return;
        isValid = true;
    }

    boolean isValidPacket() {
        return isValid;
    }
}
